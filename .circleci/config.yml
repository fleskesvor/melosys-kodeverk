# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
defaults: &defaults
  docker:
    # specify the version you desire here
    - image: circleci/node:latest

version: 2.1
jobs:
  build:
    <<: *defaults
    working_directory: ~/melosys-kodeverk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - checkout
      - run:
          name: Check versions and env
          command: |
              yarn --version
              node --version
              env
# Yarn
#      - restore_cache:
#        key: yarn-cache-{{ checksum "yarn.lock" }}
#       - run: yarn install && yarn build
#       - save_cache:
#           key: yarn-cache-{{ checksum "yarn.lock" }}
#            paths:
#              - node_modules
#
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: yarn test
      # run build
      - run: yarn build

      - run:
          name: Debugging dist directory
          command: |
            cd dist
            pwd
            ls -la
            cat ./semver.txt
      # Persisterer dist-katalogen med de genererte filene      
      - persist_to_workspace:
          root: ~/melosys-kodeverk
          paths:
            - dist
      - run:
          name: Deploy
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm whoami
            npm publish --access public

  deploy:
    <<: *defaults
    steps:
      - run:
          name: Deployer
          command: |
            echo "Deployer"
            
  java_bygg_og_release:
    docker:
      # Henter inn docker-image for melosys-kodeverk-java, som kan generere melosys-internt-kodeverk
      # Bruker eksplisitt referanse, og ikke latest (siden det verken garanterer siste versjon eller bygg som kan rekjÃ¸res)
      - image: navikt/melosys-kodeverk-java:bd59613917c17c54f33fd0e93b61093ebd3092e3
    steps:
      # Henter opp den persisterte dist-katalogen
      - attach_workspace:
          at: ~/melosys-kodeverk
      - run:
          name: Bygge Java-kodeverk
          command: |
            set -e
            cd /
            java -jar ./app.jar ~/melosys-kodeverk/dist/semver.txt ~/melosys-kodeverk/dist/kodemap.yml
            cd melosys-internt-kodeverk
            mvn clean install -B -V
            # mvn -B --settings ../travis/settings.xml deploy -Prelease -DskipTests=true
            # mvn -B --settings ../settings.xml deploy -DskipTests=true
            # /release.sh ~/melosys-kodeverk/dist/semver.txt ~/melosys-kodeverk/dist/kodemap.yml  
            echo $GPG_KEY_BASE64 | base64 --decode | gpg --yes --batch --import
            mvn -B -V -e --settings ../settings.xml deploy -Prelease -DskipTests=true
          
workflows:
  version: 2.1
  bygg_og_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
      - java_bygg_og_release:
          context: Maven Central Release
          requires:
            - build
#          filters:
#            branches:
#              only:
#                - master
#                          